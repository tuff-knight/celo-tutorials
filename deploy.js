const ContractKit = require('@celo/contractkit');
const Web3 = require('web3');
const MetaCoin = require('./token.json');
const Tx = require('ethereumjs-tx');
require('dotenv').config();

const main = async () => {
  // Create connection to DataHub Celo Network node
  const web3 = new Web3(process.env.REST_URL);
  const client = ContractKit.newKitFromWeb3(web3);

  // Initialize account from our private key
  const account = web3.eth.accounts.privateKeyToAccount(process.env.PRIVATE_KEY);

  // We need to add private key to ContractKit in order to sign transactions
  client.addAccount(account.privateKey);
  const contract = new web3.eth.Contract(MetaCoin)
  const hexCode = contract.deploy({
    data: '0x60c0604052600760808190526626bcaa37b5b2b760c91b60a09081526100289160029190610093565b5060408051808201909152600280825261135560f21b602090920191825261005291600391610093565b506004805460ff1916601217905569d3c21bcecceda100000060055534801561007a57600080fd5b5060055433600090815260016020526040902055610126565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100d457805160ff1916838001178555610101565b82800160010185558215610101579182015b828111156101015782518255916020019190600101906100e6565b5061010d929150610111565b5090565b5b8082111561010d5760008155600101610112565b6108e4806101356000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806379cc67901161006657806379cc67901461029657806395d89b41146102c2578063a9059cbb146102ca578063dd62ed3e146102f6576100cf565b806342966c68146102255780635c6581651461024257806370a0823114610270576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab57806327e235e3146101e1578063313ce56714610207575b600080fd5b6100dc610324565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103af565b604080519115158252519081900360200190f35b610199610413565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b03813581169160208101359091169060400135610419565b610199600480360360208110156101f757600080fd5b50356001600160a01b0316610527565b61020f610539565b6040805160ff9092168252519081900360200190f35b61017d6004803603602081101561023b57600080fd5b5035610542565b6101996004803603604081101561025857600080fd5b506001600160a01b03813581169160200135166105f2565b6101996004803603602081101561028657600080fd5b50356001600160a01b031661060c565b61017d600480360360408110156102ac57600080fd5b506001600160a01b038135169060200135610627565b6100dc610645565b61017d600480360360408110156102e057600080fd5b506001600160a01b0381351690602001356106a0565b6101996004803603604081101561030c57600080fd5b506001600160a01b0381358116916020013516610757565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103a75780601f1061037c576101008083540402835291602001916103a7565b820191906000526020600020905b81548152906001019060200180831161038a57829003601f168201915b505050505081565b336000818152602081815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60055481565b6001600160a01b0383166000908152602081815260408083203384529091528120548083111561044857600080fd5b6001600160a01b03841660009081526001602052604090205461046b9084610780565b6001600160a01b03808616600090815260016020526040808220939093559087168152205461049a90846107da565b6001600160a01b0386166000908152600160205260409020556104bd81846107da565b6001600160a01b0380871660008181526020818152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b60016020526000908152604090205481565b60045460ff1681565b3360009081526001602052604081205461055c90836107da565b3360009081526001602052604090205560055461057990836107da565b60055560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a260408051838152905160009133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001919050565b600060208181529281526040808220909352908152205481565b6001600160a01b031660009081526001602052604090205490565b6000610634833384610419565b5061063e82610542565b9392505050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103a75780601f1061037c576101008083540402835291602001916103a7565b6000604060443610156106b257600080fd5b336000908152600160205260409020546106cc90846107da565b33600090815260016020526040808220929092556001600160a01b038616815220546106f89084610780565b6001600160a01b0385166000818152600160209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b6001600160a01b0391821660009081526020818152604080832093909416825291909152205490565b60008282018381101561063e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061063e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156108a65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561086b578181015183820152602001610853565b50505050905090810190601f1680156108985780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fea26469706673582212208103f5293df220bbcb9f2c7a635f892861f574b5facd5d26d0a881fda27e5f7764736f6c634300060c0033',
  }).encodeABI()
  const nonce = await web3.eth.getTransactionCount(account.address).catch(err => {
    console.log("getTransactionCount err", err.toString())
    throw err
  })
  console.log('nonce', nonce)
  if (nonce == undefined || nonce < 0) {
    throw new Error("wrong nonce", nonce)
  }
  var rawTx = {
    from: account.address,
    nonce: web3.utils.toHex(nonce),
    gasPrice: web3.utils.toHex(Math.pow(10, 9)),
    gasLimit: web3.utils.toHex(3000000),
    value: 0,
    data: hexCode
  }

  console.log("rawTx", rawTx)
  var tx = new Tx.Transaction(rawTx);

  tx.sign(new Buffer.from(account.privateKey.substr(2), 'hex'));
  var serializedTx = tx.serialize();
  // console.log('serializedTx', serializedTx.toString('hex'))
  const sendTxResult = await web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex')).catch(err => {
    console.log("send tx err", account.address, nonce, err)
    throw err
  })
  console.log(`Height: ${sendTxResult.blockNumber || 0}, ` +
    `BlockHash: ${sendTxResult.blockHash || ''}, TransactionHash: ${sendTxResult.transactionHash || ''}`)
};

main().catch((err) => {
  console.error(err);
});